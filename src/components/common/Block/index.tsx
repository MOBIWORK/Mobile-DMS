
import React, {forwardRef, memo, useMemo} from 'react';
import { StyleProp, StyleSheet, View, ViewStyle} from 'react-native';

import {BlockProps} from './type';
import { useTheme } from '../../../layouts/theme';
import { enhance ,propsToStyle} from '../../../utils/commom.utils';

const styles = StyleSheet.create({
  block: {
    flex: 1,
  },
});

const BlockComponent = forwardRef(
  (props: BlockProps, ref: React.ForwardedRef<View>) => {
    // state
    const theme = useTheme();
    const {
      block,
      margin,
      marginLeft,
      alignItems,
      alignSelf,
      marginRight,
      marginTop,
      marginBottom,
      direction: flexDirection,
      padding,
      paddingHorizontal,
      paddingVertical,
      width,
      height,
      border,
      borderWidth,
      borderColor,
      color: backgroundColor,
      justifyContent,
      middle,
      paddingRight,
      paddingBottom,
      paddingLeft,
      paddingTop,
      borderRadius,
      shadow,
      flex,
      shadowConfig,
      position,
      flexWrap,
      left,
      right,
      bottom,
      top,
      zIndex,
      overflow,
      borderBottomWidth,
      borderLeftWidth,
      borderRightWidth,
      borderTopWidth,
      borderBottomColor,
      borderBottomLeftRadius,
      borderBottomRightRadius,
      borderLeftColor,
      borderRightColor,
      borderStyle,
      borderTopColor,
      borderTopLeftRadius,
      borderTopRightRadius,
      opacity,
      maxHeight,
      maxWidth,
      minHeight,
      minWidth,
      style = {},
      children,
      colorTheme,
      marginHorizontal,
      marginVertical,
      ...rest
    } = props;

    const styleComponent = useMemo(
      () =>
        {
                return enhance([
                    [
                        block === true && styles.block,
                        border === true && {
                            borderWidth: 1,
                            borderColor: '#bbb',
                        },
                        colorTheme && { backgroundColor: theme.colors[colorTheme] },
                        middle && { alignItems: 'center' },
                        shadow && {
                            shadowColor: '#000',
                            shadowOffset: {
                                width: 0,
                                height: 10,
                            },
                            shadowOpacity: 0.09,
                            shadowRadius: 5,

                            elevation: 5,
                            ...shadowConfig,
                        },
                        propsToStyle([
                            { margin },
                            { marginLeft },
                            { marginRight },
                            { marginTop },
                            { marginBottom },
                            { flexDirection },
                            { padding },
                            { paddingRight },
                            { paddingBottom },
                            { paddingLeft },
                            { paddingTop },
                            { paddingHorizontal },
                            { paddingVertical },
                            { width },
                            { height },
                            { maxHeight },
                            { maxWidth },
                            { minHeight },
                            { minWidth },
                            { borderWidth },
                            { borderColor },
                            { backgroundColor },
                            { justifyContent },
                            { alignItems },
                            { alignSelf },
                            { borderRadius },
                            { flex },
                            { position },
                            { flexWrap },
                            { left },
                            { right },
                            { bottom },
                            { top },
                            { zIndex },
                            { overflow },
                            { borderBottomColor },
                            { borderBottomLeftRadius },
                            { borderBottomRightRadius },
                            { borderLeftColor },
                            { borderRightColor },
                            { borderStyle },
                            { borderTopColor },
                            { borderTopLeftRadius },
                            { borderTopRightRadius },
                            { opacity },
                            { borderBottomWidth },
                            { borderLeftWidth },
                            { borderRightWidth },
                            { borderTopWidth },
                            
                            
                        ]),
                        style,
                    ] as StyleProp<ViewStyle>,
                ]);
            },
      [
        block,
        border,
        colorTheme,
        theme.colors,
        middle,
        shadow,
        shadowConfig,
        margin,
        marginLeft,
        marginRight,
        marginTop,
        marginBottom,
        flexDirection,
        padding,
        paddingRight,
        paddingBottom,
        paddingLeft,
        paddingTop,
        paddingHorizontal,
        paddingVertical,
        width,
        height,
        maxHeight,
        maxWidth,
        minHeight,
        minWidth,
        borderWidth,
        borderColor,
        backgroundColor,
        justifyContent,
        alignItems,
        alignSelf,
        borderRadius,
        flex,
        position,
        flexWrap,
        left,
        right,
        bottom,
        top,
        zIndex,
        overflow,
        borderBottomColor,
        borderBottomLeftRadius,
        borderBottomRightRadius,
        borderLeftColor,
        borderRightColor,
        borderStyle,
        borderTopColor,
        borderTopLeftRadius,
        borderTopRightRadius,
        opacity,
        borderBottomWidth,
        borderLeftWidth,
        borderRightWidth,
        borderTopWidth,
        style,
      ],
    );

    // render
    return (
      <View style={[styleComponent]} {...rest} ref={ref} children={children} />
    );
  },
);
export const Block = memo(BlockComponent);
